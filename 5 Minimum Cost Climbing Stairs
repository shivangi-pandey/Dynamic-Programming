class Solution {
public:
    int jump(vector<int>& cost,int n,vector<int>& dp){
        if(n==cost.size()-1) return cost[n];
        if(n>=cost.size()) return 0;
        if(dp[n]) return dp[n];
        dp[n]=cost[n]+min(jump(cost,n+1,dp),jump(cost,n+2,dp));
        
        return dp[n];
    }
    
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        vector<int> dp(n,0);
        return min(jump(cost,0,dp),jump(cost,1,dp));
    }
};
