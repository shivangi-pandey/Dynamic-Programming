Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*' where: 

'.' Matches any single character.​​​​
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false



------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    bool isMatch(string s, string p) {
        int n = s.length();
        int m = p.length();
        bool dp[n+1][m+1];
        for(int i=0;i<=n;i++)
        dp[i][0] = false;
        dp[0][0] = true;
    
        for(int i=1;i<=m;i++){
        if(p[i-1]!='*')
            dp[0][i] = false;
        else
            dp[0][i] = dp[0][i-2] || dp[0][i-1];
        }

    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(p[j-1]=='.' || p[j-1]==s[i-1]){
                dp[i][j] = dp[i-1][j-1];
            }
            else if(p[j-1] != '*')
                dp[i][j] = false;
            else{
                // cout<<j;
                dp[i][j] = dp[i][j-2];
                int k = i;
                // cout<<j<<" "<<k<<endl;
                while(k>0 && (p[j-2]==s[k-1]||p[j-2]=='.')){
                    dp[i][j] |= dp[k][j-1];
                    k--;
                    if(dp[i][j])
                        break;
                }
            }
        }
    }
    return dp[n][m];  
    }
};
